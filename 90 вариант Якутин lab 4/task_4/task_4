import sqlite3
import pickle
import json
import csv

def connect_to_db(file):
    return sqlite3.connect(file)

def read_text(file):
    with open(file, 'r', encoding="utf-8") as f:
        lines = f.readlines()
        items = []
        item = {}
        for line in lines:
            if line == "=====\n":
                if len(item.keys()) == 7:
                    items.append(item)
                item = {}
                continue
            pair = line.strip().split("::")
            key = pair[0]
            if key in ['name', 'category', 'fromCity']: 
                pair[1] = pair[1]
            if key in ['quantity', 'views']:
                pair[1] = int(pair[1])
            if key in ['price']:
                pair[1] = float(pair[1])
            item[key] = pair[1]

    return items

def read_csv(path):
    with open(path, 'r', encoding = 'utf-8') as f:
        reader = csv.DictReader(f, ['name', 'method', 'param'], delimiter=";")
        reader.__next__()
        items = list(reader)
        for item in items:
            if item['method'] == 'available':
                item['param'] = item['param']
            elif item['method'] != 'remove':
                item['param'] = float(item['param'])

    return items

def create_product_table(db):
    cursor = db.cursor()

    cursor.execute("""
        CREATE TABLE product (id integer primary key, 
                   name text, 
                   price real, 
                   quantity integer, 
                   category text, 
                   fromCity text, 
                   isAvailable bool, 
                   views integer,
                   version integer default 0)
    """)

def insert_data(db, items):
    cursor = db.cursor()
    cursor.executemany("""
        INSERT INTO product (name, price, quantity, category, fromCity, isAvailable, views)
        VALUES (:name, :price, :quantity, :category, :fromCity, :isAvailable, :views)
    """, items)
    db.commit() 

def handle_updates(db, updates):
    for update in updates:
        if update['method'] == 'remove':
            handle_remove(db, update['name'])
        elif update['method'] == 'price_percent':
            handle_price_percent(db, update['name'], update['param'])
        elif update['method'] == 'price_abs':
            handle_price_abs(db, update['name'], update['param'])
        elif update['method'] == 'quantity_add':
            handle_quantity_add(db, update['name'], update['param'])
        elif update['method'] == 'quantity_sub':
            handle_quantity_add(db, update['name'], update['param'])
        elif update['method'] == 'available':
            handle_quantity_available(db, update['name'], update['param'])

def handle_remove(db, name):
    cursor = db.cursor()
    cursor.execute("DELETE FROM product WHERE name == ?", [name])
    db.commit()

def handle_price_percent(db, name, param):
    cursor = db.cursor()
    cursor.execute("UPDATE product SET price = ROUND(price * (1 + ?), 2), version = version + 1 WHERE name = ?", [param, name])
    db.commit()

def handle_price_abs(db, name, param):
    cursor = db.cursor()
    cursor.execute("UPDATE product SET price = price + ?, version = version + 1 WHERE name = ?", [param, name])
    db.commit()

def handle_quantity_add(db, name, param):
    cursor = db.cursor()
    cursor.execute("UPDATE product SET quantity = quantity + ?, version = version + 1 WHERE name = ?", [param, name])
    db.commit()

def handle_quantity_available(db, name, param):
    cursor = db.cursor()
    cursor.execute("UPDATE product SET isAvailable = ?, version = version + 1 WHERE name = ?", [param, name])
    db.commit()

def save_jsons(path, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def connect_to_db_dict(file):
    conn = sqlite3.connect(file) 
    conn.row_factory = sqlite3.Row
    return conn

def first_query(db):
    cursor = db.cursor()
    res = cursor.execute("""
        SELECT *
        FROM product
        ORDER BY version DESC
        LIMIT 10
    """)

    items = []
    for row in res.fetchall():
        items.append(dict(row))

    return items

def second_query(db):
    cursor = db.cursor()
    res = cursor.execute("""
        SELECT 
            category,
            COUNT(*) as count_groups,
            SUM(price) as price_sum,
            MIN(price) as price_min,
            MAX(price) as price_max,
            AVG(price) as price_avg
        FROM product
        GROUP BY category
    """)

    items = []
    for row in res.fetchall():
        items.append(dict(row))

    return items

def third_query(db):
    cursor = db.cursor()
    res = cursor.execute("""
        SELECT 
            category,
            SUM(quantity) as quantity_sum,
            MIN(quantity) as quantity_min,
            MAX(quantity) as quantity_max,
            AVG(quantity) as quantity_avg
        FROM product
        GROUP BY category
    """)

    items = []
    for row in res.fetchall():
        items.append(dict(row))

    return items

def fourth_query(db):
    cursor = db.cursor()
    res = cursor.execute("""
        SELECT 
            category,
            fromCity,
            COUNT(*) as count,
            AVG(price) as price_avg,
            MAX(price) as price_max,
            AVG(views) as views_avg, 
            MAX(views) as views_max           
        FROM product
        GROUP BY category, fromCity
        ORDER BY count DESC                
    """)

    items = []
    for row in res.fetchall():
        items.append(dict(row))

    return items

#STEP 1 DONE
#db = connect_to_db("task_4/fourth_db.db")
#create_product_table(db)
#items = read_text('task_4/4/_product_data.text')
#insert_data(db, items)

#STEP 2 UPDATE
#db = connect_to_db("task_4/fourth_db.db")
#updates = read_csv('task_4/4/_update_data.csv')
#handle_updates(db, updates)

#STEP 3
db = connect_to_db_dict('task_4/fourth_db.db')
save_jsons('task_4/first_q.json', first_query(db))
save_jsons('task_4/second_q.json', second_query(db))
save_jsons('task_4/third_q.json', third_query(db))
save_jsons('task_4/fourth_q.json', fourth_query(db))